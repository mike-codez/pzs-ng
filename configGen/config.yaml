readme_header: |+
    ZSCONFIG.H - A GUIDE
    ---------------------

    zsconfig.h can include a number of options. Starting with pzs-ng beta 4, the
    settings in zsconfig.h are overrides, meaning that not all of these settings
    need be in zsconfig.h. Only the ones you change should be put there.
    This provide a very flexible configuration, and upgrades should be less of a
    hassle, since new settings in the config is no longer a concern - they will
    be used with default settings.

    Here follow a summary of all settings. I hope this will provide some idea on
    what the different things does. The format is as follow:

    <define> <option(s)>
            Description
            Default: <value>

    To add a define, for instance sitepath_dir, put the following in you zsconfig.h

    #define sitepath_dir	"/mysite/"

    ie, add '#define" in front, and the option(s) behind.


    -------------------------------------------------------------------------------

defaults_header: |+
    /*
     * zsconfig.defaults.h - ZipScript-C default config file
     * 
     * DO NOT EDIT THIS FILE!!
     * 
     * This file contains all settings, and it's default values. You should not edit
     * this file, but instead copy the settings you need into zsconfig.h, which
     * will override the default settings found in here. So do not remove or
     * change anything in this file!! A complete list of settings, with comments
     * can be found in README.ZSCONFIG
     */

dist_header: |+
    /* zsconfig.h - ZipScript-C config file
     *
     * This file only contains overrides of the defaults. If you need to edit/change
     * other options, please copy the option from README.ZSCONFIG and place it in
     * here.
     * The complete list of options availible is found in README.ZSCONFIG.
     *
     * Please do not change settings you do not understand!
     *
     * The hash char ``#'' does not signify comments! DO NOT REMOVE!
     */


    /* DO NOT USE WILDCARDS HERE! */
dist_nongl_header: |+
    /* These are settings that are especially relevant when you're not running under glftpd.
     * Make sure that all paths are absolute and _real_, e.g. set log to /home/myuser/wzd/var/log/wzdftpd/wzd.log 
     *
     * You should probably also create these two first dirs using:
     *  mkdir -p -m777 /home/myuser/wzd/var/lib/pzs-ng */
options:
    sitepath_dir:
        type: path
        comment: |-
            This is used as a base for datacleaner, when it's run as a cscript.
            It is normally set to /site/, which is the common location in which all
            your site's public dirs reside.
        default: '"/site/"'

    log:
        type: path
        comment: |-
            This setting should point to a file where all logging will occur. The
            usual place is glftpd's glftpd.log. This file must be world read/
            writable (+rw).
        default: '"/ftp-data/logs/glftpd.log"'

    storage:
        type: path
        comment: |-
            This is the place where the zipscript keeps a 'mirror' of your site's
            setup. Here stats for racers and releases are stored. This storage
            should not be accessible to your site's users, but must be world
            read/writable (+rwx).
        default: '"/ftp-data/pzs-ng/"'

    gl_userfiles:
        type: path
        comment: |-
            This is the place where userfiles are stored. The files must be world
            readable (+r).
        default: '"/ftp-data/users/"'

    dupepath:
        type: path
        comment: |-
            This is the location of glftpd's dupefile. The file must be world
            read/writable (+rw), and so must the containing dir (+rwx).
        default: '"/ftp-data/logs/dupefile"'

    dirlogpath:
        type: path
        comment: |-
            This is the location of glftpd's dirlog. The file must be world
            read/writable (+rw), and so must the containing dir (+rwx).
        default: '"/ftp-data/logs/dirlog"'

    group_dirs:
        type: paths
        comment: |-
            This is the place(s) where your site's groups/affilliates have space
            provided. Normally each (release-)group have a designated area
            accessible only to the group's members, in which they upload a new
            release and 'pre' it (release it) simultanously on several sites.
            Uploads and races in these dirs will not be logged. Dirs are separated
            with the space character.
        default: '"/site/groups/"'

    zip_dirs:
        type: paths
        comment: |-
            This variable should hold a list of dirs where you expect zip-releases.
            Dirs listed here will be logged. Dirs are separated by a space
            character.
        default: '"/site/test/ /site/incoming/0day/"'

    sfv_dirs:
        type: paths
        comment: |-
            Similar to zip_dirs, this holds a list of dirs you expect to get sfv-
            releases. Typical releases that use sfv is anything that is not zipped,
            like rar, mp3, avi etc. Dirs listed here will be logged. Dirs are
            separated by a space character.
        default: '"/site/test/ /site/incoming/mp3/ /site/incoming/games/ /site/incoming/apps/ /site/incoming/musicvideos/ /site/incoming/requests/"'

    nocheck_dirs:
        type: paths
        comment: |-
            Normally dirs in group/zip/sfv dirs are checked for corruption and
            completeness. The dirs listed in this varaible will override paths
            inside the previous dirs, and not check the files uploaded.
            Unlike the original zipscript-c, pzs-ng will only check dirs listed
            in group/zip/sfv dirs, and not the entire site. Dirs are separated
            by a space character.
        default: '"/site/private/"'

    noforce_sfv_first_dirs:
        type: paths
        comment: |-
            The option 'force_sfv_first' forces sfv to be uploaded first in a
            release. In some dirs, this may not be desiarable. To the rescue come
            this option, which allow you to enter dirs that will be excluded from
            the force.
        default: '"/site/incoming/requests/"'

    speedtest_dirs:
        type: paths
        comment: |-
            On sites it is common with special dirs dedicated to speedtesting. You
            can define here the dirs dedicated to speedtesting.
        default: '"/site/speedtest/"'

    speedtest_delfile:
        type: boolean
        comment: |-
            With speedtest you can choose if you wish to keep the uploaded files or
            remove them immediatly. If you choose to keep them, the files will be
            renamed to xx.xMiB
        default: false

    use_partial_on_noforce:
        type: boolean
        comment: |-
            Usually all pathmatches are full paths. You can change this on what
            you put in noforce_sfv_first_dirs to make it match parts of a dir,
            like 'sample' or something. Please be careful to include a slash after
            the dirs if this setting is on - like '/sample/', to minimize the
            number of possible wrong hits.
        default: false

    spaces_to_dots:
        type: boolean
        comment: |-
            This option will replace spaces in audio-genre dirs to dots.
        default: false

    audio_nocheck_dirs:
        type: paths
        comment: |-
            Audio-files can be checked against a list of allowed/denied genres,
            years etc. Audio-files found in paths defined in this variable will
            not be checked against these defines, thus allowing them. Dirs are
            separated by a space character.
        default: '"/site/groups/ /site/incoming/requests/"'

    audio_nosort_dirs:
        type: paths
        comment: |-
            If you do not want to sort the audio-files in certain dirs (but still
            want to check for validity and announce them in chan) you can define a
            list of dirs in this variable.
        default: '"/site/incoming/requests/"'

    rescan_nocheck_dirs_allowed:
        type: boolean
        comment: |-
            If you need to check a dir placed in a nocheck_dirs area, you must
            set this variable to TRUE. Setting this to FALSE will render the rescan
            option dead in nocheck_dirs areas.
        default: true

    rescan_default_to_quick:
        type: boolean
        comment: |-
            This option sets the default mode for rescan regarding the quick mode.
            In quick mode only the files not already marked as good will be
            rescanned. This is good if some files are uploaded, but not checked by
            the zipscript.
        default: true

    strict_path_match:
        type: boolean
        comment: |-
            This setting is used to enforce the filetype (zip/sfv) based on path.
            When set to TRUE, zip files is not allowed in sfv dirs, and the other
            way around. group dirs are not affected, as they can be both.
        default: false

    sfv_calc_single_fname:
        type: boolean
        comment: |-
            Setting this to TRUE enables the zipscript to calculate a crc checksum
            for filenames listed in the sfv, which do not have a corresponding crc.
            Normally only broken sfv's should have a missing crc after a filename.
        default: false

    subdir_list:
        type: string
        comment: |-
            This is a list of what is defined as subdirs. Dirs matching these
            patterns will be considered subdirs, and follow a different pattern
            regarding symlinks and nfo-rules etc.
            Put the char '?' where a number or char may or may not be, but *only*
            at the end of a dirname. Ie, cd?? will match cdA, cd12, but not cd123.
            Do not put '?' at the beginning or in the middle - it will not work.
            The string is not case-sensitive (dVd == DvD).
        default: '"cd??,disc??,disk??,dvd??,extra?,sub?,subtitle?,vobsub?,sample?,subpack?,ac3,audioaddon,addon,ac3addon,proof,cover?,codec?"'

    sample_list:
        type: string
        comment: |-
            This is a comma-seperated list of sample-dirs. The list is not case-sensitive.
        default: '"sample,vobsample,samples"'

    gl_sections:
        type: string
        comment: |-
            Here you should put a list of all sections on your site. Sections is
            not the same as dirs, but is what you have defined as sections in
            glftpd.conf. See glftpd's docs for more info on sections.
            First section is normally named 'DEFAULT'. The order in which you put
            the names of the sections are important. Separate sections with a
            space character.
        default: '"DEFAULT"'

    short_sitename:
        type: string
        comment: |-
            Insert here the name of your site, short format. This will be used on
            progressbars, completebars etc. This can be used in a cookie (%Z).
        default: '"NG"'

    allowed_types_exemption_dirs:
        type: paths
        comment: |-
            In allowed_types we define filetypes that are allowed on site w/o
            any checks. Define here paths where these filetypes should be checked
            *if* an sfv is uploaded.
        default: '"/site/incoming/musicvideos/"'

    check_for_missing_nfo_dirs:
        type: paths
        comment: |-
            Normally each release has a .nfo included. It has info about the
            release written by the release-group, and may contain vital info
            like serials etc. The paths defined in this value will be checked
            for missing nfo after the release is marked as 'complete'. Separate
            dirs with a space character.
        default: '"/site/incoming/games/ /site/incoming/apps/"'

    create_missing_sfv_link:
        type: boolean
        comment: |-
            normally releases have a sfv, unless they are zip releases. This
            setting will check for missing sfv in releases.
        default: true

    create_incomplete_links_in_group_dirs:
        type: boolean
        comment: |-
            Should incomplete indicators be created in groupdirs? With the default
            settings this should be no problem, but if you change the location of
            the links, it may very well be.
        default: true

    check_for_missing_sample_dirs:
        type: paths
        comment: |-
            Each movie-release should have a sample included, to show quality.
            The paths defined in this value will be checked for missing samples.
            Separate dirs with a space character.
        default: '"/site/incoming/movies/"'

    missing_sample_check_ignore_dividers:
        type: string
        comment: |-
            List of characters that can be around the strings listed in
            missing_sample_check_ignore_list. Leave this empty if you want to
            match parts of dirnames without them being surrounded.
            This list is casesensitive.
            Example: With "proof" in missing_sample_check_ignore_list,
            Proof.Of.Concept-GRP would only be matched if
            missing_sample_check_ignore_dividers is empty.
        default: '"._-"'

    missing_sample_check_ignore_list:
        type: string
        comment: |-
            If a dirname under the paths listed in check_for_missing_sample_dirs
            has any of the strings in this list, then a sample is not required
            and no incomplete_sample_indicator is created.
            Every string is checked to be surrounded by the chars in
            missing_sample_check_ignore_dividers. This implies that the first and
            last character of a dirname are never checked as part of a listed
            string, unless missing_sample_check_ignore_dividers is empty.
            Separate strings with a comma character. List is not casesensitive.
        default: '"dirfix,fix,freezefix,fullsubpack,nfofix,proof,rarfix,subfix,subpack,subpck,syncfix,prooffix,avifix,framefix,sizefix,audiofix"'

    create_missing_sample_link:
        type: boolean
        comment: |-
            Movie-releases should have a sample. This setting will check for
            missing samples in releases.
        default: false

    GROUPFILE:
        type: path
        comment: |-
            This is the location of glftpd's groupfile.
        default: '"/etc/group"'

    PASSWDFILE:
        type: path
        comment: |-
            This is the location of glftpd's passwd file.
        default: '"/etc/passwd"'

    combine_path:
        type: boolean
        comment: |-
            Some clients do not cwd into the releasedir before uploading file(s).
            To allow such clients this option must be set to TRUE.
        default: false

    days_back_cleanup:
        type: integer
        comment: |-
            This setting defines how many days backward should be scanned on
            cleanup. 0=disabled, 1=today only, 2=yesterday and today etc.
        default: 2
    cleanupdirs:
        type: paths
        comment: |-
            To keep your site tidy and free from stale/dead symlinks created by the
            zipscript, you should put here a list of dirs to scan for dead links.
            The list is not recursive, and does not take wildcards.
        default: '"/site/test/ /site/incoming/games/ /site/incoming/apps/ /site/incoming/musicvideos/"'

    cleanupdirs_dated:
        type: paths
        comment: |-
            To keep your site tidy and free from stale/dead symlinks created by the
            zipscript, you should put here a list of dirs to scan for dead links.
            The list is not recursive, and does not take wildcards. This list can
            contain format cookies for dated directories, refer to 'man strftime' 
            for a list of available date cookies.
        default: '"/site/incoming/0day/%m%d/ /site/incoming/mp3/%m%d/"'

    always_scan_audio_syms:
        type: boolean
        comment: |-
            On cleanup symlinks are removed. However, if cleanup is used as a
            cscript, only current dir will be checked. You can make sure to
            clean up broken audio-symlinks as well, by setting this variable to
            TRUE. Because audio archives can get huge, this is not on by default.
        default: false

    write_complete_message_in_group_dirs:
        type: boolean
        comment: |-
            Should a .message file be created in the group-dirs?
        default: true

    hide_group_uploaders:
        type: boolean
        comment: |-
            If you wish to hide the names of the member of a releasegroup in the
            .message file, this option will 'hide' the uploader.
        default: true

    hide_gname:
        type: string
        comment: |-
            Set here something you wish to use instead of the groupname when
            hiding users. Setting this empty will not change groupname.
        default: '""'

    hide_uname:
        type: string
        comment: |-
            Set here something you wish to use instead of the username when
            hiding users. Setting this empty will make the username the same
            as groupname, unless show_users_in_group_dirs is set to TRUE.
        default: '""'

    show_users_in_group_dirs:
        type: boolean
        comment: |-
            Setting this to TRUE will disable the hiding of usernames. This
            option is discouraged.
        default: false

    custom_group_dirs_complete_message:
        type: string
        can_disable: true
        comment: |-
            If you rather would like to put in a predefined message in the
            .message in group-dirs, define here what that message should be.
            Setting this variable to DISABLED disables it.
        default: '"... Looks like this is a pre. :)\n"'

    create_missing_files:
        type: boolean
        comment: |-
            To easily see what files are missing in a release, the zipscript can
            create a 0-byte file of each missing file (filename-missing). This
            file will be removed when the file is uploaded and found free of
            errors.
        default: true

    status_bar_type:
        type: integer
        valid_values: 
            - BAR_FILE
            - BAR_DIR
            - BAR_OFF
        comment: |-
            In each dir there will be a statusbar. Here you define if you wish
            to make it as a file (BAR_FILE) or as a dir (BAR_DIR). To disable use
            BAR_OFF.
        default: BAR_DIR

    incompleteislink:
        type: integer
        valid_values: 
            - TRUE
            - FALSE
        comment: |-
            While a release is incomplete, a link will be created pointing to
            the releasedir. You can define if it will be a file (FALSE) or
            a symbolic link (TRUE).
        default: TRUE

    userellink:
        type: integer
        valid_values: 
            - FALSE
            - TRUE
        comment: |-
            With symbolic links you have an option of it being absolute (FALSE) or
            relative (TRUE).
        default: TRUE

    program_uid:
        type: integer
        comment: |-
            Some may want to run zipscript-c as a special user, which will be
            set as 'owner' of links, missing files etc. Setting this to anything
            but 0 will force the zipscript to change uid to the number you put
            here. In order for this to work, zipscript-c needs the suid bit set.
        default: 0

    program_gid:
        type: integer
        comment: |-
            Same as with program_uid, only this is with the group.
        default: 0

    allowed_types:
        type: string
        comment: |-
            This variable holds a comma-separated list of extensions. All files
            with any of these extensions are allowed and not checked.
        default: '"jpg,jpeg,cue,m3u,txt,vob,png,m2ts,ts"'

    ignored_types:
        type: string
        comment: |-
            Files found with an extension listed in this variable are denied on
            upload, and ignored on rescan/postdel/etc. The list is comma-separated.
            Defining a file with no extension can be done by starting the list
            with a comma. The dot before the extension should not be added.
            .diz, .message and .debug is normally generated by the zipscript, so
            these types should be listed here. Also add types 3rd party scripts
            commonly make, like .imdb, .html, .url, .date etc.
        default: '",diz,debug,message,imdb,html,url,metadata,date,xxxdata,ioftpd"'

    sample_types:
        type: string
        comment: |-
            Comma-separated list of file extensions considered to be sample files.
        default: '"mpg,mpeg,m2v,m2p,avi,mkv,mov,mp4,wmv,vob,ts,jpg,jpeg,png,m2ts"'

    video_types:
        type: string
        comment: |-
            Comma-separated list of files considered to be video files. Should
            usually not be changed, but may need to be if a 3rd party script handle
            sample info.
        default: '"mpg,mpeg,m2v,m2p,avi,mkv,mov,mp4,wmv,vob,ts"'

    allow_files_not_in_sfv:
        type: boolean
        comment: |-
            Should we allow files uploaded that is not in the sfv? This is only
            valid on upload (not rescan etc), and is normally not used. Please
            note that this is a override option - you may be not like everything
            this option allows on your site...
        default: false

    create_missing_sfv:
        type: boolean
        comment: |-
            If this option is set to TRUE, the rescan binary will create sfv files
            if none is found in the dir.
        default: false

    strict_sfv_check:
        type: boolean
        comment: |-
            Whenever "bad" entries are found in the sfv, they are usually ignored.
            Setting this settingto true will mark the entire sfv as bad if such
            entries are found, forcing the user to upload a valid sfv file.
            Bad entries consist of lines containing the NULL char, or lines without
            a valid crc code.
        default: false

    mark_file_as_bad:
        type: boolean
        comment: |-
            Normally files marked as bad are deleted. You can change this by setting
            the following value to TRUE - instead of the file being deleted, it will
            be renamed <filename>.bad. Bad files are ignored on rescan.
        default: false

    allow_file_resume:
        type: boolean
        comment: |-
            Broken transfers may be a problem on some sites. Glftpd2 and pzs-ng
            allow you to resume such files by setting this to TRUE.
        default: false

    sleep_on_bad:
        type: integer
        comment: |-
            Whenever a bad file is encountered, you can add a delay for the user
            between 1 and 1000 seconds. Put the number of seconds glftpd should
            sleep. Setting this to 0 ( or >1000) will disable this feature.
        default: 0

    debug_mode:
        type: boolean
        comment: |-
            If something seems weird/doesn't work, you should debug. Setting this
            variable to TRUE will turn on debugging. A file named .debug will be
            created, normally in the same dir as the upload-dir.
            Related option(s): debug_altlog debug_announce
        default: false

    debug_altlog:
        type: boolean
        comment: |-
            If debug is on, you can choose wether you wish to have the .debug file
            in the releasedir, or in the mirrored tree created in 'storage'. Please
            note that if you choose to put the debug file in the 'storage' path,
            some debug-info may be lost. Setting this to TRUE will use the
            'storage' path, while FALSE will use the upload-dir.
            Note that the debug file will be named 'debug' in the 'storage' and
            '.debug' in the releasedir.
            Related option(s): debug_mode debug_announce
        default: true

    debug_announce:
        type: boolean
        comment: |-
            If this variable is set to TRUE, and debug_mode is set to TRUE the
            zipscript will announce to the uploader that the script is running in
            debug mode. The announce is done at the very beginning of the script,
            which means that it should give some output no matter what, if it
            manages to start. Good to find out if the script has actually been
            executed.
            If the script(s) are unable to write to .debug and debug_announce is
            on, the debug msg's will be pasted to the client instead.
            Related option(s): debug_mode debug_altlog
        default: false

    benchmark_mode:
        type: boolean
        comment: |-
            This option will show the user uploading an estimate of how long it
            took the zipscript to scan the uploaded file.
        default: true

    ignore_zero_size:
        type: boolean
        comment: |-
            This option is for debugging purposes only. Normally files of size
            0 bytes are logged as bad, meaning glftpd will delete them. This
            option makes it possible to allow such files.
        default: false

    ignore_zero_sized_on_rescan:
        type: boolean
        comment: |-
            Sometimes a release is approved, which usually is not according to
            site rules. One of the ways to approve a dir is to create a 0-sized
            file in the dir, with the word APPROVED or ALLOWED somewhere.
            This setting will ignore all zero-sized files on rescan.
        default: false

    remove_dot_debug_on_delete:
        type: boolean
        comment: |-
            If you have debug mode on, users may or may not be able to see the
            hidden files in the dir, and glftpd may be set up to deny the user
            to delete other people's files (the .debug may be owned by a different
            racer). Setting this to TRUE will try to remove the .debug file if
            the dir itself is removed. Previously, people had to have access to
            the wipe-command to be able to do this.
            Related option(s): remove_dot_files_on_delete
        default: true

    remove_dot_files_on_delete:
        type: boolean
        comment: |-
            If your site hides hidden files (files starting with a dot (''.''),
            your users may have problems deleting dirs completely. Setting this
            option to TRUE will remove all hidden files, when all other files of
            the release is deleted.
            Related option(s): remove_dot_debug_on_delete
        default: false

    unzip_bin:
        type: path
        comment: |-
            This is the location of the unzip binary needed to verify zip-releases.
        default: '"/bin/unzip"'

    allow_error2_in_unzip:
        type: boolean
        comment: |-
            If unzip exits with error code 1 or 2 (a generic error) - should the file
            be allowed anyway? There really shouldn't be any errors, so it's
            recommended to leave this setting to the default FALSE.
        default: false

    sfv_dupecheck:
        type: boolean
        comment: |-
            Setting this option to TRUE will remove duplicate entries within the
            uploaded sfv file.
            Related option(s): sfv_cleanup sfv_cleanup_lowercase sfv_cleanup_crlf
                               sfv_lenient deny_double_sfv deny_resume_sfv
                               allow_slash_in_sfv sfv_cleanup_comments
        default: true

    sfv_cleanup:
        type: boolean
        comment: |-
            Setting this to TRUE will remove heading and trailing whitespace and
            enable cleanup of the uploaded sfv depending on which related options
            are set to TRUE.
            Related option(s): sfv_dupecheck sfv_cleanup_lowercase sfv_cleanup_crlf
                               sfv_lenient deny_double_sfv deny_resume_sfv
                               allow_slash_in_sfv sfv_cleanup_comments
        default: true

    sfv_cleanup_comments:
        type: boolean
        comment: |-
            Setting this to true will cleanup the uploaded sfv by removing comments.
            Comments are all lines containing ';'.
            Related option(s): sfv_dupecheck sfv_cleanup_lowercase sfv_cleanup_crlf
                               sfv_lenient deny_double_sfv deny_resume_sfv
                               allow_slash_in_sfv sfv_cleanup_comments
        default: true

    sfv_cleanup_lowercase:
        type: boolean
        comment: |-
            If sfv_cleanup is set to TRUE, this setting will also convert all
            entries in the sfv to lowercase.
            If sfv_cleanup is set to FALSE, this setting will only make -missing
            pointers and the internal sfv database lowercased.
            Either way, if set to TRUE you in effect turn winblows mode on, and the
            zipscript will not separate case on filenames.
            Related option(s): sfv_dupecheck sfv_cleanup sfv_cleanup_crlf
                               sfv_lenient deny_double_sfv deny_resume_sfv
                               allow_slash_in_sfv sfv_cleanup_comments
        default: true

    sfv_cleanup_crlf:
        type: boolean
        comment: |-
            If sfv_cleanup is set to TRUE, this option defines if you use windows
            or *nix version of linefeeds. The recommended option is to leave this
            to TRUE, using windows style (<cr><lf>).
            Related option(s): sfv_dupecheck sfv_cleanup sfv_cleanup_lowercase
                               sfv_lenient deny_double_sfv deny_resume_sfv
                               allow_slash_in_sfv sfv_cleanup_comments
        default: true

    sfv_lenient:
        type: boolean
        comment: |-
            If this is set to true, the chars '_' , '-' , '.' , ' ' and ',' are
            recognized as the same char. Ie, if you have in sfv 'file.name' and
            upload 'file_name' - the file will be allowed.
            Related option(s): sfv_dupecheck sfv_cleanup sfv_cleanup_lowercase
                               sfv_cleanup_crlf deny_double_sfv deny_resume_sfv
                               allow_slash_in_sfv sfv_cleanup_comments
        default: true

    deny_double_sfv:
        type: boolean
        comment: |-
            With sfv releases, there should be only one sfv file allowed. This can
            be done two ways - either by force or by being 'smart'. Setting this
            option to TRUE will deny any new sfv in the dir, if a sfv already has
            been uploaded. Setting it to FALSE will make the zipscript check the
            new sfv first, compare it to the old sfv file and make a decision
            based on the content of the sfv. If the new sfv contains more files
            than the old one, and they match with what is already uploaded in the
            dir, it will be allowed and used. If it does not, it will be denied.
            Related option(s): sfv_dupecheck sfv_cleanup sfv_cleanup_lowercase
                               sfv_cleanup_crlf sfv_lenient deny_resume_sfv
                               allow_slash_in_sfv sfv_cleanup_comments
        default: false

    deny_resume_sfv:
        type: boolean
        comment: |-
            This option works like deny_double_sfv, only it will deny even resumed
            or overwritten sfv files. If that happens, a backup of the original sfv
            will be copied back to the release.
            Related option(s): sfv_dupecheck sfv_cleanup sfv_cleanup_lowercase
                               sfv_cleanup_crlf sfv_lenient deny_double_sfv
                               allow_slash_in_sfv sfv_cleanup_comments
        default: true

    deny_double_nfo:
        type: boolean
        comment: |-
            This is usually done (better) with a 3rd party app, but ... You can
            deny a nfo upload if one already exists in the same dir.
        default: false

    exclude_non_sfv_dirs:
        type: boolean
        comment: |-
            Applies only to audio releases - NEEDS MORE INFO HERE!!!!!
        default: true

    force_sfv_first:
        type: boolean
        comment: |-
            In sfv_dirs, you can either allow files to be uploaded by default and
            checked later when the sfv arrives, or you can force the uploader to
            first provide a sfv before any other filetype is allowed. Setting this
            to TRUE will do the latter.
        default: false

    allow_slash_in_sfv:
        type: boolean
        comment: |-
            Allow slashes '/' in sfv? If TRUE whatever is behind the last slash is
            taken as the filename. If FALSE, the sfv is rejected.
            Related option(s): sfv_dupecheck sfv_cleanup sfv_cleanup_lowercase
                               sfv_cleanup_crlf sfv_lenient deny_double_sfv
                               deny_resume_sfv
        default: true

    audio_types:
        type: string
        comment: |-
            Comma-separated list of files considered to be audio files. Sorting will
            apply on directories containing these.
        default: '"mp3,flac"'

    audio_genre_sort:
        type: boolean
        comment: |-
            If you wish to sort audio releases by genre, set this to TRUE.
        default: false

    audio_genre_path:
        type: path
        comment: |-
            If you choose to sort audio releases by genre, this is the place
            where the symlinks will be created. This dir must be created in order
            for the sorting to work - the zipscript will not create it for you.
        default: '"/site/incoming/music.by.genre/"'

    audio_artist_sort:
        type: boolean
        comment: |-
            If you wish to sort audio releases by artist, set this to TRUE.
        default: false

    audio_artist_sort_various_only:
        type: boolean
        comment: |-
            An audio release containing multiple artists and having VA-/VA_
            start the releasename, will be sorted in artist subdirs for each
            appearing artist and in the VA-sortdir. Set this to TRUE to only
            sort in the VA-sortdir.
        default: false

    audio_artist_nosub:
        type: boolean
        comment: |-
            If you sort audio by artist, a dir with the first char in the artist is
            created under audio_artist_path, and then a link to the actual release
            is made. audio_artist_nosub, if set to TRUE, will instead create dirs
            based on the full name of the artist, and then put a link in that dir
            instead.
        default: false

    audio_artist_noid3:
        type: boolean
        comment: |-
            If you sort audio by artist ID3 tag will be used to get the first
            char of the artist. If you would like to use the first char of the
            release-name instead, set this to TRUE.
        default: false

    audio_artist_path:
        type: path
        comment: |-
            If you choose to sort audio releases by artist, this is the place
            where the symlinks will be created. This dir must be created in order
            for the sorting to work - the zipscript will not create it for you.
        default: '"/site/incoming/music.by.artist/"'

    audio_year_sort:
        type: boolean
        comment: |-
            If you wish to sort audio releases by year, set this to TRUE.
        default: false

    audio_year_path:
        type: path
        comment: |-
            If you choose to sort audio releases by year, this is the place
            where the symlinks will be created. This dir must be created in order
            for the sorting to work - the zipscript will not create it for you.
        default: '"/site/incoming/music.by.year/"'

    audio_group_sort:
        type: boolean
        comment: |-
            If you wish to sort audio releases by group, set this to TRUE.
        default: false

    audio_group_path:
        type: path
        comment: |-
            If you choose to sort audio releases by group, this is the place
            where the symlinks will be created. This dir must be created in order
            for the sorting to work - the zipscript will not create it for you.
        default: '"/site/incoming/music.by.group/"'

    audio_language_sort:
        type: boolean
        comment: |-
            If you wish to sort audio releases by language, set this to TRUE.
        default: false

    audio_language_path:
        type: path
        comment: |-
            If you choose to sort audio releases by language, this is the place
            where the symlinks will be created. This dir must be created in order
            for the sorting to work - the zipscript will not create it for you.
        default: '"/site/incoming/music.by.language/"'

    delete_old_link:
        type: boolean
        comment: |-
            If you do NOT want to have the zipscript/rescan/audiosort delete any
            links with the same name when it tries to create a new link, set this 
            to FALSE. This will cause rescan / audiosort to be useless if there
            already are sortedlinks for this release.
        default: true

    allowed_constant_bitrates:
        type: string
        comment: |-
            You can restrict uploaded audio releases several ways. For mp3 one
            is by bitrate. Only CBR (Constant Bit Rate) mp3-files are of interest
            via this setting. The list you define should be comma-separated.
        default: '"160,192"'

    audio_cbr_check:
        type: boolean
        comment: |-
            Should the zipscript check for allowed bitrate on CBR audio/mp3
            releases? Set to TRUE if yes.
        default: true

    audio_cbr_warn:
        type: boolean
        comment: |-
            If the audio-release is not in the list of allowed cbr bitrates, should
            the zipscript log a warning message instead of deleting the file? Set
            to TRUE if yes.
        default: true

    allowed_years:
        type: string
        comment: |-
            Another way to restrict audio-releases is by year. Define here a list
            of years allowed on site. The list should be comma-separated.
        default: '"2010,2011,2012,2013,2014,2015"'

    audio_year_check:
        type: boolean
        comment: |-
            Should the zipscript check for allowed years on audio releases? Set
            to TRUE if yes.
        default: true

    audio_year_warn:
        type: boolean
        comment: |-
            If the audio-release is not in the list of allowed years, should the
            zipscript log a warning message instead of deleting the file? Set to
            TRUE if yes.
        default: true

    banned_genres:
        type: string
        comment: |-
            You can also restrict by genre. Use this variable to define genres
            not allowed on your site. Genres are separated by a comma.
        default: '"Christian Rap,Christian Gangsta Rap,Contemporary Christian,Christian Rock"'

    allowed_genres:
        type: string
        comment: |-
            Instead of listing all denied genres, you can list all allowed genres.
            Put here a comma-separated list of allowed genres.
        default: '"Top 40,Pop Funk,Rock,Pop"'

    audio_ignored_languages:
        type: string
        comment: |-
            To prevent audio language sorting of languages that aren't, well,
            languages, list here what should be ignored. Not case sensitive, and
            the list is comma separated.
        default: '"md,cd,lp,ep,va"'

    audio_banned_genre_check:
        type: boolean
        comment: |-
            Should the audio release be checked against your defined genres?
            Only audio_banned_genre_check OR audio_allowed_genre_check should be
            set to TRUE - not both.
        default: true

    audio_allowed_genre_check:
        type: boolean
        comment: |-
            Should the audio release be checked against your defined genres?
            Only audio_banned_genre_check OR audio_allowed_genre_check should be
            set to TRUE - not both.
        default: false

    audio_genre_warn:
        type: boolean
        comment: |-
            If the audio-release is not part of allowed genres, should the
            zipscript log a warning message instead of deleting the file? Set to
            TRUE if yes.
        default: true

    del_banned_release:
        type: boolean
        comment: |-
            If you want to make absolutely sure the banned release does not take up
            more bandwith or space than necessary, you can choose to completely
            remove the releasedir.
            NOTE: This will override the *_warn setting - ie, you will get a warning
            announce, but the file along with the entire dir will be removed.
        default: false

    crc_algo:
        type: integer
        valid_values:
            - CRC_STANDARD
            - CRC_SLICEBY4
            - CRC_SLICEBY8
        comment: |-
            The crc-algorithm to be used. Normally sliceby8 > sliceby4 > standard,
            but on some limited hardware this order is different.
        default: CRC_SLICEBY8

    create_m3u:
        type: boolean
        comment: |-
            If you wish to create .m3u files on complete audio-releases, set this to
            TRUE.
        default: true

    enable_files_ahead:
        type: boolean
        comment: |-
            To limit the amount of logging on races, you can choose to only report
            a new leader in a race if a racer is leading with a certain amount of
            files. Set to TRUE to enable this feature.
        default: true

    newleader_files_ahead:
        type: integer
        comment: |-
            Define here how many files ahead a racer must be before the zipscript
            announces him as new leader.
        default: 2

    min_newleader_files:
        type: integer
        comment: |-
            Define here the minimum number of files in the RELEASE to announce a
            new leader in a race.
        default: 1

    min_update_files:
        type: integer
        comment: |-
            Define here the minimum number of files in the RELEASE to announce an
            update message.
        default: 2

    min_halfway_files:
        type: integer
        comment: |-
            Define here the minimum number of files in the RELEASE to announce a
            halfway message.
        default: 10

    min_newleader_size:
        type: integer
        comment: |-
            Define here the minimum estimated total size (in MB) of RELEASE to
            announce a new leader in a race.
        default: 10

    min_update_size:
        type: integer
        comment: |-
            Define here the minimum estimated total size (in MB) of RELEASE to
            announce an update message.
        default: 1

    min_halfway_size:
        type: integer
        comment: |-
            Define here the minimum estimated total size (in MB) of RELEASE to
            announce a halfway message.
        default: 10

    max_users_in_top:
        type: integer
        comment: |-
            Put here the maximum number of users to be logged in a race, when a
            release is complete.
        default: 7

    max_groups_in_top:
        type: integer
        comment: |-
            Put here the maximum number of groups to be logged in a race, when a
            release is complete.
        default: 7

    announce_norace:
        type: boolean
        comment: |-
            If this variable is set to FALSE, announces with only one racer will
            not be announced.
        default: true

    get_competitor_list:
        type: boolean
        comment: |-
            This setting, if set to TRUE, will put a list of all racers
            excluding the current user into a special cookie.
        default: true

    get_user_stats:
        type: boolean
        comment: |-
            If this is set to true, the zipscript will try to fetch stats from the
            racers userfiles.
        default: true

    show_stats_from_pos2_only:
        type: boolean
        comment: |-
            If this is set to true, only racers in position 2 and below is shown
            in the %T and %t cookies - this affects the LOOP variables in the bot.
        default: false

    show_user_info:
        type: boolean
        comment: |-
            If you wish to print stat info after a file is uploaded to the racer,
            set this to true. It will display racers (usernames) and stats on the
            current race in the client's ftp program.
        default: true

    show_group_info:
        type: boolean
        comment: |-
            If you wish to print stat info after a file is uploaded to the racer,
            set this to true. It will display racers (groupnames) and stats on the
            current race in the client's ftp program.
        default: true

    write_complete_message:
        type: boolean
        comment: |-
            Should a file be created in the releasedir, containing race-info etc?
        default: true

    message_store_in_mirror:
        type: boolean
        comment: |-
            Enable this to have the message_file_name stored in the mirror location where the racedata is stored, defined by "storage".
            A symlink is made in the releasedir pointing to the real message_file_name, with the same name.
        default: false

    message_file_name:
        type: string
        can_disable: true
        comment: |-
            What name should the complete_message file have?
        default: '".message"'

    message_header:
        type: string
        can_disable: true
        comment: |-
            Define here what should be put in the top of the complete_message.
        default: '".-----------------====-------------------------== PZS-NG v1.2.0 ===--.\n"' 

    message_user_header:
        type: string
        can_disable: true
        comment: |-
            Define here what should be put above a list of racers (users).
        default: '"|-=[ U S E R T O P ]=---------------.                                |\n|                                    `-----------------====----------|\n"'

    message_user_body:
        type: string
        can_disable: true
        comment: |-
            Define here the body of the list of racers (users).
        default: '"| %3n %-29U %7.1mM %4fF %5.1p%% %7.0sKBs |\n"'

    message_user_footer:
        type: string
        can_disable: true
        comment: |-
            Define here the footer of the list of racers (users).
        default: '"|- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |\n| %3u Total %31.1mM %4fF 100.0%% %7.0aKBs |\n"'

    message_group_header:
        type: string
        can_disable: true
        comment: |-
            Define here what should be put above a list of racers (groups).
        default: '"|                                                                    |\n|-=[ G R O U P T O P ]=-------------.                                |\n|                                    `--------------===--------------|\n"'

    message_group_body:
        type: string
        can_disable: true
        comment: |-
            Define here the body of the list of racers (groups).
        default: '"| %3n %-29g %7.1mM %4fF %5.1p%% %7.0sKBs |\n"'

    message_group_footer:
        type: string
        can_disable: true
        comment: |-
            Define here the footer of the list of racers (groups).
        default: '"|- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |\n| %3g Total %31.1mM %4fF 100.0%% %7.0aKBs |\n"'

    message_audio:
        type: string
        can_disable: true
        comment: |-
            Define here a special complete_message for audio-releases.
        default: '"|                                                                    |\n|-=[ I D 3 - T A G ]=---------------.                                |\n|                                    `-----==-------------===--------|\n| Artist : %-57x |\n| Album  : %-57W |\n| Genre  : %-34w Rate  : %3Xkbit/s      |\n| Tracks : %-34f Year  : %-14Y |\n| Encoder: %-34i Preset: %-14I |\n"'

    message_footer:
        type: string
        can_disable: true
        comment: |-
            Define here what should be put at the bottom of the complete_message
            file.
        default: '"`-----================---------------------------==------------------''\n"'

    video_completebar:
        type: string
        can_disable: true
        comment: |-
            When a release is complete, a 'complete bar' will be created. Define
            here how it should look like on video releases. If you want multiple
            completebars _per release_, separate them with "\n" (Like "foo\nbar").
        default: '"[%Z] - ( %.0mM %fF - COMPLETE ) - [%Z]"'

    audio_completebar:
        type: string
        can_disable: true
        comment: |-
            When a release is complete, a 'complete bar' will be created. Define
            here how it should look like on audio releases. If you want multiple
            completebars _per release_, separate them with "\n" (Like "foo\nbar").
        default: '"[%Z] - ( %.0mM %fF - COMPLETE - %w %Y ) - [%Z]"'

    rar_completebar:
        type: string
        can_disable: true
        comment: |-
            When a release is complete, a 'complete bar' will be created. Define
            here how it should look like on rar releases. If you want multiple
            completebars _per release_, separate them with "\n" (Like "foo\nbar").
        default: '"[%Z] - ( %.0mM %fF - COMPLETE ) - [%Z]"'

    zip_completebar:
        type: string
        can_disable: true
        comment: |-
            When a release is complete, a 'complete bar' will be created. Define
            here how it should look like on zip releases. If you want multiple
            completebars _per release_, separate them with "\n" (Like "foo\nbar").
        default: '"[%Z] - ( %.0mM %fF - COMPLETE ) - [%Z]"'

    other_completebar:
        type: string
        can_disable: true
        comment: |-
            When a release is complete, a 'complete bar' will be created. Define
            here how it should look like on other releases. If you want multiple
            completebars _per release_, separate them with "\n" (Like "foo\nbar").
        default: '"[%Z] - ( %.0mM %fF - COMPLETE ) - [%Z]"'

    del_audio_completebar:
        type: string
        can_disable: true
        comment: |-
            This setting is what the zipscript will search for (and delete) when
            it updates the complete bar for audio releases.
        default: '"^\\[.*] - \\( .*F - COMPLETE - .*) - \\[.*]$"'

    del_other_completebar:
        type: string
        can_disable: true
        comment: |-
            This setting is what the zipscript will search for (and delete) when
            it updates the complete bar for other releases.
        default: '"^\\[.*] - \\( .*F - COMPLETE ) - \\[.*]$"'

    del_rar_completebar:
        type: string
        can_disable: true
        comment: |-
            This setting is what the zipscript will search for (and delete) when
            it updates the complete bar for rar releases.
        default: '"^\\[.*] - \\( .*F - COMPLETE ) - \\[.*]$"'

    del_video_completebar:
        type: string
        can_disable: true
        comment: |-
            This setting is what the zipscript will search for (and delete) when
            it updates the complete bar for video releases.
        default: '"^\\[.*] - \\( .*F - COMPLETE ) - \\[.*]$"'

    del_zip_completebar:
        type: string
        can_disable: true
        comment: |-
            This setting is what the zipscript will search for (and delete) when
            it updates the complete bar for zip releases.
        default: '"^\\[.*] - \\( .*F - COMPLETE ) - \\[.*]$"'

    zipscript_header:
        type: string
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown as the head of that message.
        default: '".-== PZS-NG Zipscript-C ==-------------------------.\n"'

    zipscript_sfv_ok:
        type: string
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown as the body of that message on sfv-file-
            upload.
        default: '"| + SFV-file: oK!                                  |\n"'

    zipscript_any_ok:
        type: string
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown as the body of that message on any ok
            file.
        default: '"| + File: ok! (allowed w/o any checks)             |\n"'

    zipscript_SFV_ok:
        type: string
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown as the body of that message on sfv-
            checked file.
        default: '"| + CRC-Check: oK!                                 |\n"'

    zipscript_SFV_skip:
        type: string
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown as the body of that message when sfv
            has not yet been uploaded.
        default: '"| + CRC-Check: SKIPPED!                            |\n"'

    zipscript_zip_ok:
        type: string
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown as the body of that message on zipfile
            upload.
        default: '"| + ZiP integrity: oK!                             |\n"'

    realtime_audio_info:
        type: string
        can_disable: true
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown as the body of that message on audiofiles
            upload.
        default: '"+-=[ID3tag]=------------------------===------------+\n| Title  : %-39y |\n| Artist : %-39x |\n| Album  : %-39W |\n| Genre  : %-39w |\n| Year   : %-39Y |\n"'

    realtime_user_header:
        type: string
        can_disable: true
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown in the body of that message, head of
            user-stats.
        default: '"+-=[UserTop]=-------------------===----------------+\n"'

    realtime_user_body:
        type: string
        can_disable: true
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown in the body of that message, body of
            user-stats.
        default: '"| %2n. %-15u %8.1mMB %4fF %7.0skB/s |\n"'

    realtime_user_footer:
        type: string
        can_disable: true
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown in the body of that message, footer of
            user-stats.
        default: '""'

    realtime_group_header:
        type: string
        can_disable: true
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown in the body of that message, head of
            group-stats.
        default: '"+-=[GroupTop]=--------------------===--------------+\n"'

    realtime_group_body:
        type: string
        can_disable: true
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown in the body of that message, body of
            group-stats.
        default: '"| %2n. %-15g %8.1mMB %4fF %7.0skB/s |\n"'

    realtime_group_footer:
        type: string
        can_disable: true
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown in the body of that message, footer of
            group-stats.
        default: '""'

    zipscript_footer_unknown:
        type: string
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown in the footer of that message, on uploads
            where no sfv is uploaded yet.
        default: '"`-[ - NO - SFV - ]----------------------[%3F/???]--''\n"'

    zipscript_footer_ok:
        type: string
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown in the footer of that message, on uploads
            where the file is verified ok.
        default: '"`-[%V]----------------------[%3F/%-3f]--''\n"'

    zipscript_footer_error:
        type: string
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown in the footer of that message, on uploads
            where the file has error.
        default: '"| - %-46v |\n`-----------------------------------========-------''\n"'

    zipscript_footer_skip:
        type: string
        comment: |-
            When files are uploaded, some output is shown to the racer uploading.
            Put here what should be shown in the footer of that message, on uploads
            where the file has skipped checking.
        default: '"`--------------------------------=====-------------''\n"'

    incomplete_cd_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on multi-cd releases.
        default: '"../../(incomplete)-(%0)-%1"'

    incomplete_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on normal releases.
        default: '"../(incomplete)-%0"'

    incomplete_base_nfo_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing nfo in multi-cd releases.
        default: '"../../(no-nfo)-%1"'

    incomplete_nfo_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing nfo in normal releases.
        default: '"../(no-nfo)-%0"'

    incomplete_base_sfv_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing sfv in multi-cd releases.
        default: '"../../(no-sfv)-%1"'

    incomplete_sfv_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing sfv in normal releases.
        default: '"../(no-sfv)-%0"'

    incomplete_base_sample_indicator:
        type: string
        comment: |-
            On upload an indicator is created if sample is missing.
            This variable defines indicators on missing sample in multi-cd releases.
        default: '"../../(no-sample)-%1"'

    incomplete_sample_indicator:
        type: string
        comment: |-
            On upload an indicator is created if sample is missing.
            This variable defines indicators on missing sample in normal releases.
        default: '"../(no-sample)-%0"'

    incomplete_generic1_path:
        type: path
        comment: |-
            If dir matches this string, the generic1 indicators will be used
            to create the incomplete indicators.
        default: '""'

    incomplete_generic1_cd_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on multi-cd releases.
        default: '"/site/incompletes/(incomplete)-(%0)-%1"'

    incomplete_generic1_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on normal releases.
        default: '"/site/incompletes/(incomplete)-%0"'

    incomplete_generic1_base_nfo_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing nfo in multi-cd releases.
        default: '"/site/incompletes/(no-nfo)-%1"'

    incomplete_generic1_nfo_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing nfo in normal releases.
        default: '"/site/incompletes/(no-nfo)-%0"'

    incomplete_generic1_base_sfv_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing sfv in multi-cd releases.
        default: '"/site/incompletes/(no-sfv)-%1"'

    incomplete_generic1_sfv_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing sfv in normal releases.
        default: '"/site/incompletes/(no-sfv)-%0"'

    incomplete_generic1_base_sample_indicator:
        type: string
        comment: |-
            On upload an indicator is created if sample is missing.
            This variable defines indicators on missing sample in multi-cd releases.
        default: '"/site/incompletes/(no-sample)-%1"'

    incomplete_generic1_sample_indicator:
        type: string
        comment: |-
            On upload an indicator is created if sample is missing.
            This variable defines indicators on missing sample in normal releases.
        default: '"/site/incompletes/(no-sample)-%0"'

    incomplete_generic2_path:
        type: path
        comment: |-
            If dir matches this string, the generic2 indicators will be used
            to create the incomplete indicators.
        default: '""'

    incomplete_generic2_cd_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on multi-cd releases.
        default: '"/site/incompletes/(incomplete)-(%0)-%1"'

    incomplete_generic2_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on normal releases.
        default: '"/site/incompletes/(incomplete)-%0"'

    incomplete_generic2_base_nfo_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing nfo in multi-cd releases.
        default: '"/site/incompletes/(no-nfo)-%1"'

    incomplete_generic2_nfo_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing nfo in normal releases.
        default: '"/site/incompletes/(no-nfo)-%0"'

    incomplete_generic2_base_sfv_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing sfv in multi-cd releases.
        default: '"/site/incompletes/(no-sfv)-%1"'

    incomplete_generic2_sfv_indicator:
        type: string
        comment: |-
            On upload an indicator is created after each file, to show still
            incomplete releases. Put here how that indicator will look.
            This variable defines indicators on missing sfv in normal releases.
        default: '"/site/incompletes/(no-sfv)-%0"'

    incomplete_generic2_base_sample_indicator:
        type: string
        comment: |-
            On upload an indicator is created if sample is missing.
            This variable defines indicators on missing sample in multi-cd releases.
        default: '"/site/incompletes/(no-sample)-%1"'

    incomplete_generic2_sample_indicator:
        type: string
        comment: |-
            On upload an indicator is created if sample is missing.
            This variable defines indicators on missing sample in normal releases.
        default: '"/site/incompletes/(no-sample)-%0"'

    progressmeter:
        type: string
        comment: |-
            On upload a complete-bar is created after each file, to show how
            complete the release is. Put here how that indicator will look.
        default: '"[%V] - %3.0p%% Complete - [%Z]"'

    del_progressmeter:
        type: string
        comment: |-
            On upload a complete-bar is created after each file, to show how
            complete the release is. Put here what to search for when updating
            that bar - the file(s) matching this will be deleted.
        default: '"^\\[.*] - .*%% Complete - \\[.*]$"'

    progressmeter_audio:
        type: string
        comment: |-
            On upload a complete-bar is created after each file, to show how
            complete the release is. Put here how that indicator will look.
            This is for audio releases only.
        default: '"[%V] - %3.0p%% Complete - (%w) [%Z]"'

    del_progressmeter_audio:
        type: string
        comment: |-
            On upload a complete-bar is created after each file, to show how
            complete the release is. Put here what to search for when updating
            that bar - the file(s) matching this will be deleted.
            This is for audio releases only.
        default: '"^\\[.*] - .*%% Complete - (.*) \\[.*]$"'

    charbar_missing:
        type: character
        comment: |-
            The progressbar consist of two chars, which together marks the progress
            of the release. Put here the char to be used to mark missing files.
        default: '":"'

    charbar_filled:
        type: character
        comment: |-
            The progressbar consist of two chars, which together marks the progress
            of the release. Put here the char to be used to mark uploaded files.
        default: '"#"'

    enable_accept_script:
        type: boolean
        comment: |-
            An external script can be run after a file is verified and ok. Put
            this to TRUE to run the external script.
        default: false

    accept_script:
        type: path
        comment: |-
            Put here the path to the external script which should be run after
            a file is verified and ok.
        default: '"/bin/imdb_parse.sh"'

    enable_nfo_script:
        type: boolean
        comment: |-
            An external script can be run after a nfo upload. Put his to TRUE to
            run the external script.
        default: false

    nfo_script:
        type: path
        comment: |-
            Put here the path to the external script which should be run after a
            nfo upload.
        default: '"/bin/psxc-imdb.sh"'

    enable_complete_script:
        type: boolean
        comment: |-
            An external script can be run after a release is complete. Put this to
            TRUE to run the external script.
        default: false

    complete_script:
        type: path
        comment: |-
            Put here the path to the external script which should be run after a
            release is marked complete.
        default: '"/bin/nfo_copy.sh"'

    enable_rescan_script:
        type: boolean
        comment: |-
            An external script can be run after rescan and the release is complete.
            Note that this option is not valid on zip releases.
            Put this to TRUE to run the external script.
        default: false

    rescan_script:
        type: path
        comment: |-
            Put here the path to the external script which should be run on rescan
            if the release is complete.
            Note that this option is not valid on zip releases.
        default: '"/bin/rescan_script.sh"'

    enable_audio_script:
        type: boolean
        comment: |-
            Put here the path to the external script which should be run after
            the first uploaded audiofile in an audio-release.
        default: false

    audio_script:
        type: path
        comment: |-
            Put here the path to the external script which should be run after
            the first uploaded audiofile in an audio-release.
        default: '"/bin/ng-chown"'

    audio_script_cookies:
        type: string
        comment: |-
            Put here what should be used as args for the external script after
            the first uploaded audiofile in an audio-release.
        default: '"0 0 0 1 0 1 - \"%w\" \"%?\""'

    enable_delbanned_script:
        type: boolean
        comment: |-
            When del_banned_release is TRUE, the banned release will be removed,
            but the dirlog stays unaffected. The delbanned_script executes before
            the directory is removed and marks it as deleted in the dirlog.
        default: true

    delbanned_script:
        type: path
        comment: |-
            Enter the name of the script which is called when a release is
            banned and will be deleted. The argument given is the full
            chrooted path, and if the script exits with a non-zero value,
            the dir is not removed. The example script marks a dir as deleted
            in glftpd's dirlog.
        default: '"/bin/ng-deldir"'

    enable_unduper_script:
        type: boolean
        comment: |-
            If you allow sfv to be uploaded after other files, some files may be
            marked as bad when the sfv is read and compared to the crc of the file.
            The file is then deleted, and a new one needs be uploaded. In order
            for that to happen, the file needs to be unduped, or it will be denied
            by glftpd. Set this variable to TRUE to run an external script after
            a file has been marked as bad, and which undupes it.
        default: true

    unduper_script:
        type: path
        comment: |-
            Enter the name of the script doing the actual unduping of the file.
        default: '"/bin/ng-undupe"'

    enable_sample_script:
        type: boolean
        comment: |-
            Should a script be executed after sample uploads? Only valid on uploads
            in sample dirs (see sample_list for info), and only if file is a
            video file.
        default: false

    sample_script:
        type: path
        comment: |-
            Enter the name of the script you wish to execute on sample uploads.
        default: '"/bin/sample_script.sh"'

    accept_before_complete:
        type: boolean
        comment: |-
            This option specify if accept_script should run before complete_script
            or not.
        default: false

    disable_audio_race:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_audio_sfv:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_audio_update:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_audio_halfway:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_audio_newleader:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_audio_complete:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_audio_norace_halfway:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_audio_norace_complete:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_video_race:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_video_sfv:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_video_update:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_video_halfway:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_video_newleader:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_video_complete:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_video_norace_halfway:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_video_norace_complete:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_rar_race:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_rar_sfv:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_rar_update:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_rar_halfway:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_rar_newleader:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_rar_complete:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_rar_norace_halfway:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_rar_norace_complete:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_zip_race:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_zip_sfv:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_zip_update:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_zip_halfway:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_zip_newleader:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_zip_complete:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_zip_norace_halfway:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_zip_norace_complete:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_other_race:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_other_sfv:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_other_update:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_other_halfway:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_other_newleader:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_other_complete:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_other_norace_halfway:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    disable_other_norace_complete:
        type: boolean
        comment: |-
            You can choose to disable some announces. Set to TRUE to disable the
            announce.
        default: false

    chmod_completebar:
        type: boolean
        comment: |-
            When TRUE, the permissions on the file/dir is changed to 0222. This is
            to prevent it from being transfered on download/fxp.
            Note that this will not happen in group-dirs.
        default: false

    mark_empty_dirs_as_incomplete_on_rescan:
        type: boolean
        comment: |-
            If you wish to mark an empty dir as incomplete, set this to TRUE. Empty
            dirs that are rescanned will then be marked as incomplete
        default: false

    max_seconds_wait_for_lock:
        type: integer
        comment: |-
            This number representents the maximum number of seconds a process will
            wait for a lock on release. Usually only a second or two will actually
            be used, since the only program using time by default is rescan, and it
            has a low priority, which the other processes will provide a signal to
            quit.
            Anyway, not something you should worry too much about, unless your site
            usually holds files in the 100MB area on a slow/busy server that're
            rescanned on a regular basis.
        default: 20

    lock_optimize:
        type: integer
        comment: |-
            This option is meant to minimize impact the runtime of the locking.
            The number represents the number of seconds that must pass before the
            lock is touched/updated. Usually, this is either set to 1 or 0.
            0 disable this feature.
        default: 1

    ignore_lock_timeout:
        type: boolean
        comment: |-
            If a lock cannot be obtained within the time set in
            max_seconds_wait_for_lock, the zipscript will usually exit with an
            error. You can, however, bypass this so it checks the file as normal.
            This can lead to race-conditions, however, so it's set to FALSE by
            default. Usually such conditions should *never* occur, but may in
            rare conditions, especially if 3rd party scripts/addons are being
            used.
        default: false

    allow_uid_change_in_ng_chown:
        type: boolean
        comment: |-
            ng-chown is a binary that changes the uid/gid of files dirs. In
            order for it to work you have to enable a few things. This variable
            will let ng-chown change the uid of files/dirs. ng-chown need to be
            chmod'ed +s for it to work too.
        default: false

    allow_gid_change_in_ng_chown:
        type: boolean
        comment: |-
            Same as with allow_uid_change_in_ng_chown, only with gid.
        default: false

    allow_dir_chown_in_ng_chown:
        type: boolean
        comment: |-
            In ng-chown you have to specify a dir or a file to chmod. This setting
            allows/denies to change the ownership of that file/dir.
        default: false

    allow_files_chown_in_ng_chown:
        type: boolean
        comment: |-
            In ng-chown you have to specify a dir or a file to chmod. If you specify
            a dir, this setting will chown the files in that dir, but not the dir
            itself.
        default: false

    change_spaces_to_underscore_in_ng_chown:
        type: boolean
        comment: |-
            Some ftp-clients have trouble reading the names of uid/gid if they have
            spaces in them. This will search for a uid/gid with a underscore, if
            the name (genre) given has a space inside. It is recommended to *NOT*
            change this value (from TRUE).
        default: true

    zip_clean:
        type: boolean
        comment: |-
            If you wish to clean zipfiles (remove files based on the list given in
            banned_filelist), set this to TRUE.
        default: true

    extract_nfo:
        type: boolean
        comment: |-
            Should the zipscript extract the "real" nfo from a zip?
        default: true

    deny_nfo_upload_in_zip:
        type: boolean
        comment: |-
            Should we deny nfo uploads in zip dirs? Should really only be used in
            conjuntion with extract_nfo.
        default: false

    test_for_password:
        type: boolean
        comment: |-
            Some rarfiles have password protection. If you wish to check for such
            files, set this to TRUE.
        default: true

    zip_bin:
        type: path
        comment: |-
            This is the location of the zip binary needed to clean zip-releases for
            unwanted files.
        default: '"/bin/zip"'

    banned_filelist:
        type: path
        comment: |-
            You can ban certain files on site, based on name. The check is not
            case-sensitive, and wildcards may be used.
            Put here the path to the text-file with a list of the files you do not
            want on your site.
            For more info, or upgraded lists, see http://project-sl.swecheck.net
            Please note - chars like [ and ] are used in the wildcard scheme - if you
            search for such chars in the filenames, you need to double-escape them,
            ie \\[ and \\] and \\( etc.
            For more info on how wildcards are read, read manpage of fnmatch().
        default: '"/ftp-data/misc/banned_filelist.txt"'

    check_for_banned_files:
        type: boolean
        comment: |-
            Will check the banned_filelist when uploading files - if one is
            encountered, the zipscript will deny the upload.
        default: true

    rescan_chdir_flags:
        type: string
        comment: |-
            The rescan binary can chdir() to a specified dir before starting the
            rescan. List here the flags needed by the user to be allowed to use this
            option, for instance "17ABC".
            Please note that root (uid 0) are allowed as well, no matter what flags
            he have or doesn't have. This is to help rescanning from shell.
            Group-dirs cannot be rescanned this way - they'll have to be rescanned
            the 'normal' way.
        default: '""'

    zsinternal_checks_completed:
        type: string
        comment: |-
            Output in benchmark mode.
            In default value, %0.6f = six digits number of seconds.
        default: '"Checks completed in %0.6f seconds.\n"'

    hide_affil_groups:
        type: string
        comment: |-
            Comma separated list of groups to hide. Will replace the groupname with
            the string in hide_affil_gname if non-empty, and replace the username
            with hide_affil_uname if non-empty.
        default: '""'

    hide_affil_users:
        type: string
        comment: |-
            Comma separated list of users to hide. Will replace the username with
            the string in hide_affil_uname if non-empty.
        default: '""'

    hide_affil_gname:
        type: string
        comment: |-
            What to replace hidden affil groupnames with.
        default: '"NoGroup"'

    hide_affil_uname:
        type: string
        comment: |-
            What to replace hidden affil usernames with.
        default: '"NoUser"'

    use_group_dirs_as_affil_list:
        type: boolean
        comment: |-
            Use the group_dirs as base for getting the list of affils to hide.
        default: false

    enable_affil_script:
        type: boolean
        comment: |-
            If you wish to do something on affil upload (not in group_dirs) like
            chown'ing the file, you can enable the this here.
        default: false

    affil_script:
        type: string
        comment: |-
            Enter here the name of the affil_script to be executed on affil
            uploads (not in group_dirs). The script will get the filename as arg.
        default: '"/bin/affilscript.sh"'

    SFV_FIRST:
        type: string
        comment: |-
            Error msg when sfv_first is enabled, and no sfv is uploaded prior to
            "normal" files.
        default: '"CRC-Check: SFV first!"'

    BAD_CRC:
        type: string
        comment: |-
            Error msg when crc check fails.
        default: '"CRC-Check: BAD!"'

    NOT_IN_SFV:
        type: string
        comment: |-
            Error msg when uploaded file is not found in the sfv.
        default: '"CRC-Check: Not in sfv!"'

    EMPTY_SFV:
        type: string
        comment: |-
            Error msg when uploaded sfv does not contain any parsable lines.
        default: '"SFV-file: BAD!"'

    DOUBLE_SFV:
        type: string
        comment: |-
            Error msg when a second sfv file is uploaded.
        default: '"SFV-file: DUPE!"'

    BAD_ZIP:
        type: string
        comment: |-
            Error msg when zip integrity fails.
        default: '"ZiP-Integrity: BAD!"'

    EMPTY_FILE:
        type: string
        comment: |-
            Error msg when an empty (0byte) file is uploaded.
        default: '"0byte-file: Not allowed!"'

    BANNED_FILE:
        type: string
        comment: |-
            Error msg when file is listed as banned.
        default: '"Banned file: Not allowed!"'

    UNKNOWN_FILE:
        type: string
        comment: |-
            Error msg when filetype is not recognized or is listed as unwanted.
            %s = file extension
        default: '"%s-file: Not allowed!"'

    BANNED_GENRE:
        type: string
        comment: |-
            Error msg when musicfile is of a banned genre.
            %s = genre
        default: '"%s is banned here!"'

    BANNED_YEAR:
        type: string
        comment: |-
            Error msg when musicfile is from a banned year.
            %s = year
        default: '"Releases from %s are not allowed here!"'

    BANNED_BITRATE:
        type: string
        comment: |-
            Error msg when bitrate of musicfile is banned.
            %s = bitrate
        default: '"%s kbit codec is not allowed here!"'

    DUPE_NFO:
        type: string
        comment: |-
            Error msg when a 2nd nfo is uploaded.
        default: '"NFO-File: DUPE!"'

    ZIP_NFO:
        type: string
        comment: |-
            Error msg when nfo file is uploaded in a zipdir.
        default: '"NFO-File: Not allowed here!"'

    SPEEDTEST:
        type: string
        comment: |-
            Output when file is uploaded in a speedtest dir.
        default: '"BW: %.1fMiB (%.1fMB) @ %.2fMbps (%.2fMB/s)."'

err_options:
    - BAD_CRC
    - BAD_ZIP
    - BANNED_BITRATE
    - BANNED_FILE
    - BANNED_GENRE
    - BANNED_YEAR
    - DOUBLE_SFV
    - DUPE_NFO
    - EMPTY_FILE
    - EMPTY_SFV
    - NOT_IN_SFV
    - SFV_FIRST
    - SPEEDTEST
    - UNKNOWN_FILE
    - ZIP_NFO

dist_options:
    - sitepath_dir
    - group_dirs
    - zip_dirs
    - sfv_dirs
    - nocheck_dirs
    - noforce_sfv_first_dirs
    - audio_nocheck_dirs
    - allowed_types_exemption_dirs
    - check_for_missing_nfo_dirs
    - cleanupdirs
    - cleanupdirs_dated
    - ~
    - short_sitename
    - ~
    - debug_mode
    - debug_altlog
    - ~
    - status_bar_type
    - incompleteislink
    - ~
    - ignored_types
    - ~
    - deny_double_sfv
    - force_sfv_first
    - ~
    - audio_genre_path
    - audio_artist_path
    - audio_year_path
    - audio_group_path
    - audio_language_path
    - allowed_constant_bitrates
    - allowed_years
    - banned_genres
    - allowed_genres
    - audio_genre_sort
    - audio_year_sort
    - audio_artist_sort
    - audio_group_sort
    - audio_language_sort
    - audio_cbr_check
    - audio_cbr_warn
    - audio_year_check
    - audio_year_warn
    - audio_banned_genre_check
    - audio_allowed_genre_check
    - audio_genre_warn
    - ~
    - enable_nfo_script
    - nfo_script
    - enable_complete_script
    - complete_script
dist_nongl_options:
    - ~
    - log 
    - storage 
    - banned_filelist
    - ~
    - zip_bin
    - unzip_bin
